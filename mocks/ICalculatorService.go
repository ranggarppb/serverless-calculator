// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	calculator "github.com/ranggarppb/serverless-calculator/types/calculator"

	errors "github.com/ranggarppb/serverless-calculator/errors"

	mock "github.com/stretchr/testify/mock"
)

// ICalculatorService is an autogenerated mock type for the ICalculatorService type
type ICalculatorService struct {
	mock.Mock
}

// Calculate provides a mock function with given fields: _a0, _a1
func (_m *ICalculatorService) Calculate(_a0 context.Context, _a1 string) (calculator.CalculationResult, errors.WrappedError) {
	ret := _m.Called(_a0, _a1)

	var r0 calculator.CalculationResult
	var r1 errors.WrappedError
	if rf, ok := ret.Get(0).(func(context.Context, string) (calculator.CalculationResult, errors.WrappedError)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) calculator.CalculationResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(calculator.CalculationResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.WrappedError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.WrappedError)
		}
	}

	return r0, r1
}

// GetCalculationHistory provides a mock function with given fields: _a0
func (_m *ICalculatorService) GetCalculationHistory(_a0 context.Context) calculator.CalculationHistory {
	ret := _m.Called(_a0)

	var r0 calculator.CalculationHistory
	if rf, ok := ret.Get(0).(func(context.Context) calculator.CalculationHistory); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(calculator.CalculationHistory)
	}

	return r0
}

// NewICalculatorService creates a new instance of ICalculatorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICalculatorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICalculatorService {
	mock := &ICalculatorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
