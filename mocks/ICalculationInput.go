// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	errors "github.com/ranggarppb/serverless-calculator/errors"
	mock "github.com/stretchr/testify/mock"
)

// ICalculationInput is an autogenerated mock type for the ICalculationInput type
type ICalculationInput struct {
	mock.Mock
}

// Calculate provides a mock function with given fields:
func (_m *ICalculationInput) Calculate() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetInput provides a mock function with given fields:
func (_m *ICalculationInput) GetInput() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Validate provides a mock function with given fields:
func (_m *ICalculationInput) Validate() errors.WrappedError {
	ret := _m.Called()

	var r0 errors.WrappedError
	if rf, ok := ret.Get(0).(func() errors.WrappedError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.WrappedError)
		}
	}

	return r0
}

// NewICalculationInput creates a new instance of ICalculationInput. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICalculationInput(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICalculationInput {
	mock := &ICalculationInput{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
